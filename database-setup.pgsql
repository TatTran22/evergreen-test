-- Create a table for Public Profiles
create table profiles (
  id uuid references auth.users not null,
  username text unique,
  first_name text,
  last_name text,
  age integer,
  address text,
  avatar_url text,
  website text,
  active_status boolean default false,
  active_since timestamp,
  updated_at timestamp with time zone DEFAULT timezone('ict'::text,now()) NOT NULL,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3),
);

-- create a table for friends and their status (accepted, pending, blocked), limit to 100 friends
create table friends (
  id uuid references auth.users not null,
  friend_id uuid references auth.users not null,
  status text,
  updated_at timestamp with time zone DEFAULT timezone('ict'::text,now()) NOT NULL,

  primary key (id, friend_id),
  constraint status_length check (char_length(status) <= 10),
  constraint status_unique check (status in ('accepted', 'pending', 'blocked') and id <> friend_id),
);


alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( auth.uid() = id );

create policy "Users can update own profile."
  on profiles for update
  using ( auth.uid() = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );

create policy "Anyone can update an avatar."
  on storage.objects for update
  with check ( bucket_id = 'avatars' );


-- create function to handle new users and their profiles
create or replace function public.on_create_user()
  returns trigger as $$
  begin
    insert into public.profiles (id, username) values (new.id, new.username);
    return null;
  end;
  $$ language plpgsql;

-- create trigger to handle new users and their profiles
create trigger on_create_user
  after insert on auth.users
  for each row execute procedure public.on_create_user();

-- create function to handle user deletion, also delete their profile, transactions, avatar images, and friends
create or replace function public.on_delete_user()
  returns trigger as $$
  begin
    delete from public.profiles where id = old.id;
    delete from public.transactions where id = old.id;
    delete from public.friends where id = old.id or friend_id = old.id;
    delete from storage.objects where id = old.id;
    return null;
  end;
  $$ language plpgsql;

-- create trigger to handle user deletion
create trigger on_delete_user
  after delete on auth.users
  for each row execute procedure public.on_delete_user();


-- create function to handle user updates, also update their profile
create or replace function public.on_update_user()
  returns trigger as $$
  begin
    update public.profiles set username = new.username where id = new.id;
    return null;
  end;
  $$ language plpgsql;


-- create trigger to handle user updates
create trigger on_update_user
  after update on auth.users
  for each row execute procedure public.on_update_user();

-- Create custom type for budgets table
CREATE TYPE budget_type AS ENUM ('BANK', 'CASH', 'CREDIT_CARD', 'LOAN', 'ASSET', 'INVESTMENT', 'OTHER');

-- Create a table for budgets
CREATE TABLE budgets (
	id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	creator_id uuid REFERENCES auth.users NOT NULL,
	type budget_type NOT NULL,
	name text NOT NULL,
	balance numeric(10,2) NOT NULL,
	icon_url text,
	created_at timestamp WITH time zone DEFAULT timezone('ict'::text,now()) NOT NULL,
	updated_at timestamp WITH time zone DEFAULT timezone('ict'::text,now()) NOT NULL,

	UNIQUE (name),
	CONSTRAINT name CHECK (char_length(name) >= 3),
  CONSTRAINT balance CHECK (balance >= 0)
  CONSTRAINT creator_id_fkey FOREIGN KEY (creator_id) REFERENCES auth.users (id) ON DELETE CASCADE
  CONSTRAINT type_check CHECK (type IN ('BANK', 'CASH', 'CREDIT_CARD', 'LOAN', 'ASSET', 'INVESTMENT', 'OTHER'))
);

-- Create custom type for transaction
CREATE TYPE transaction_type AS ENUM ('EXPENSE', 'INCOME', 'TRANSFER');

-- Create type for transaction status
CREATE TYPE transaction_status AS ENUM ('PENDING', 'APPROVED', 'REJECTED');

-- Create type for currency type 
CREATE TYPE currency_type AS ENUM ('USD', 'EUR', 'VND', 'JPY', 'CNY', 'KRW', 'GBP');

-- Create type for privacy type
CREATE TYPE privacy_type AS ENUM ('PRIVATE', 'FRIENDS', 'PUBLIC');

-- Create a table for transaction category
CREATE TABLE transaction_categories (
	id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	creator_id uuid REFERENCES auth.users NOT NULL,
	name text NOT NULL,
	icon_url text,
	type transaction_type[] NOT NULL,
	parent_id bigint REFERENCES public.transaction_categories,
  target_budget_id bigint REFERENCES public.budgets,
  target_user_id uuid REFERENCES auth.users,
	created_at timestamp WITH time zone DEFAULT timezone('ict'::text,now()) NOT NULL,
  updated_at timestamp WITH time zone DEFAULT timezone('ict'::text,now()) NOT NULL,

	UNIQUE (name),
	CONSTRAINT name CHECK (char_length(name) >= 3),
	CONSTRAINT type CHECK (type = ANY (ARRAY['EXPENSE', 'INCOME', 'TRANSFER'])),
  CONSTRAINT creator_id_fkey FOREIGN KEY (creator_id) REFERENCES auth.users (id),
  CONSTRAINT parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.transaction_categories (id),
  CONSTRAINT target_budget_id_fkey FOREIGN KEY (target_budget_id) REFERENCES public.budgets (id),
  CONSTRAINT target_user_id_fkey FOREIGN KEY (target_user_id) REFERENCES auth.users (id)
);

-- Create a table for transactions with foreign keys to budgets and transaction_categories tables and custom type for transaction_status and currency_type and privacy_type for transaction table
CREATE TABLE transactions (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  creator_id uuid REFERENCES auth.users NOT NULL,
  budget_id bigint REFERENCES public.budgets NOT NULL,
  category_id bigint REFERENCES public.transaction_categories NOT NULL,
  amount numeric(10,2) NOT NULL,
  currency_type currency_type NOT NULL,
  transaction_type transaction_type NOT NULL,
  transaction_status transaction_status NOT NULL,
  privacy_type privacy_type NOT NULL,
  created_at timestamp WITH time zone DEFAULT timezone('ict'::text,now()) NOT NULL,
  updated_at timestamp WITH time zone DEFAULT timezone('ict'::text,now()) NOT NULL,

  CONSTRAINT amount CHECK (amount >= 0),
  CONSTRAINT currency_type CHECK (currency_type IN ('USD', 'EUR', 'VND', 'JPY', 'CNY', 'KRW', 'GBP')),
  CONSTRAINT transaction_type CHECK (transaction_type IN ('EXPENSE', 'INCOME', 'TRANSFER')),
  CONSTRAINT transaction_status CHECK (transaction_status IN ('PENDING', 'APPROVED', 'REJECTED')),
  CONSTRAINT privacy_type CHECK (privacy_type IN ('PRIVATE', 'FRIENDS', 'PUBLIC')),
  CONSTRAINT creator_id CHECK (creator_id = ANY (SELECT id FROM auth.users)),
  CONSTRAINT budget_id CHECK (budget_id = ANY (SELECT id FROM public.budgets)),
  CONSTRAINT creator_id_fkey FOREIGN KEY (creator_id) REFERENCES auth.users (id) ON DELETE CASCADE,
  CONSTRAINT budget_id_fkey FOREIGN KEY (budget_id) REFERENCES public.budgets (id) ON DELETE CASCADE
);

-- CREATE TABLE transactions (
-- 	id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
-- 	creator_id uuid REFERENCES auth.users NOT NULL,
-- 	type transaction_type NOT NULL,
-- 	status transaction_status NOT NULL,
-- 	category_id bigint REFERENCES public.transaction_category_child,
-- 	budget_id bigint REFERENCES public.budgets,
-- 	amount numeric(10,2) NOT NULL,
-- 	currency currency_type NOT NULL,
-- 	description text,
--   image text,
-- 	created_at timestamp WITH time zone DEFAULT timezone('ict'::text,now()) NOT NULL,
-- 	updated_at timestamp WITH time zone DEFAULT timezone('ict'::text,now()) NOT NULL,

-- 	CONSTRAINT amount CHECK (amount >= 0),
-- 	CONSTRAINT description CHECK (char_length(description) >= 3),
-- 	CONSTRAINT currency CHECK (currency IN ('USD', 'EUR', 'VND', 'JPY', 'CNY', 'KRW', 'GBP'))
--   CONSTRAINT creator_id CHECK (creator_id = ANY (SELECT id FROM auth.users))
--   CONSTRAINT category_id CHECK ((category_id IS NULL) OR (category_id = ANY (SELECT id FROM public.transaction_categories))),
-- );




-- budget policy
create policy "Users can view, insert, update and delete budgets."
	on budgets for select, insert, update, delete
	using ( auth.uid() = creator_id );

-- transaction policy
alter table transactions enable row level security;

create policy "Users and their friends can view transactions"
  on transactions for select
  using ( auth.uid() = creator_id OR auth.uid() IN (SELECT friend_id FROM friends WHERE id = creator_id AND status = 'ACCEPTED') );

craete policy "Users can insert, update and delete transactions"
  on transactions for insert, update, delete
  using ( auth.uid() = creator_id );

-- transaction_category policy
alter table transaction_categories enable row level security;

create policy "Users can view all transaction categories."
	on transaction_categories for select
	using ( true );

create policy "Users can insert, update, and delete their own transaction categories."
	on transaction_categories for insert, update, delete
	with check ( auth.uid() = creator_id );

-- set up storage for categories icon
insert into storage.buckets (id, name)
values ('transaction_categories', 'transaction_categories');
create policy "Transaction categories are publicly accessible."
	on storage.objects for select
	using ( bucket_id = 'transaction_categories' );

create policy "Anyone can upload an icon."
	on storage.objects for insert
	with check ( bucket_id = 'transaction_categories' );

create policy "Anyone can update an icon."
	on storage.objects for update
	with check ( bucket_id = 'transaction_categories' );

-- set up storage for budgets icon
insert into storage.buckets (id, name)
values ('budgets', 'budgets');
create policy "Budgets are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'budgets' );

create policy "Anyone can upload an icon."
  on storage.objects for insert
  with check ( bucket_id = 'budgets' );

create policy "Anyone can update an icon."
  on storage.objects for update
  with check ( bucket_id = 'budgets' );


-- set up storage for transactions image
insert into storage.buckets (id, name)
values ('transactions', 'transactions');
create policy "Transactions are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'transactions' );

create policy "Anyone can upload an image."
  on storage.objects for insert
  with check ( bucket_id = 'transactions' );

create policy "Anyone can update an image."
  on storage.objects for update
  with check ( bucket_id = 'transactions' );

-- DUMMY DATA
insert into public.budgets (creator_id, type, name, balance, icon_url, created_at, updated_at)
values (
  'f9f9f9f9-f9f9-f9f9-f9f9-f9f9f9f9f9f9',
  'BANK',
  'Bank of America',
  0,
  'https://www.bankofamerica.com/content/dam/bankofamerica/images/logos/logo-bank-of-america.svg',
  now(),
  now()
);

insert into public.transaction_categories (creator_id, name, icon_url, type, parent_id, created_at)
values (
  'f9f9f9f9-f9f9-f9f9-f9f9-f9f9f9f9f9f9',
  'Food',
  'https://www.bankofamerica.com/content/dam/bankofamerica/images/logos/logo-bank-of-america.svg',
  '{EXPENSE, INCOME}',
  null,
  now()
);

insert into public.transactions (creator_id, type, status, category_id, budget_id, amount, currency, description, image, created_at, updated_at)
values (
  'f9f9f9f9-f9f9-f9f9-f9f9-f9f9f9f9f9f9',
  'EXPENSE',
  'APPROVED',
  1,
  1,
  100,
  'USD',
  'Food',
  'https://www.bankofamerica.com/content/dam/bankofamerica/images/logos/logo-bank-of-america.svg',
  now(),
  now()
);


